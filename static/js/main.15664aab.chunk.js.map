{"version":3,"sources":["pages/Login.js","redux/actions/userActions.js","pages/NotLogged.js","redux/actions/walletActions.js","Components/Header.js","services/economiaAPI.js","Components/ExpenseForm.js","Components/ExpenseTable.js","pages/Wallet.js","App.js","serviceWorker.js","redux/reducers/userReducer.js","redux/reducers/walletReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["Login","props","useState","email","setEmail","password","setPassword","dispatch","useDispatch","className","htmlFor","data-testid","placeholder","type","id","name","value","onChange","target","disabled","test","length","onClick","push","history","emailAction","NotLogged","to","addExpensesAction","expense","updateExpenseAction","Header","reduxState","useSelector","state","user","totalExpenses","wallet","expenses","reduce","acc","item","currency","exchangeRates","ask","toFixed","fetchApi","a","fetch","response","json","data","fetchApiFiltered","keys","Object","result","filter","ExpensyForm","setValue","setCurrency","method","setMethod","category","setCategory","description","setDescription","setExchangeRates","isExpenseEditing","editExpenseId","useEffect","index","findIndex","tag","handleSubmit","event","preventDefault","currenciesProp","currencies","onSubmit","map","key","ExpenseTable","Number","split","Wallet","dispatchCurrencies","App","prop","login","pathname","location","path","exact","component","Boolean","window","hostname","match","INITIAL_STATE","expensesId","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15664aab.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { emailAction } from '../redux/actions/userActions';\nimport './css/Login.css';\n\nexport default function Login(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleBtnClick = () => {\n    const { history: { push } } = props;\n    dispatch(emailAction(email));\n    push('/carteira');\n  };\n\n  const btnVerification = () => {\n    const regexEmail = /\\D{1,}@\\D{1,}\\.com/;\n    const magicNumber = 6;\n    if (regexEmail.test(email) && password.length >= magicNumber) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"container-centralized background-color-prymary\">\n      <div className=\"Login\">\n        <div className=\"Login__login text-color-tertiary font-size-xx\">Login</div>\n        <label htmlFor=\"login--email\">\n          <input\n            className=\"text-alin-center\"\n            data-testid=\"email-input\"\n            placeholder=\"E-mail\"\n            type=\"email\"\n            id=\"login--email\"\n            name=\"email\"\n            value={ email }\n            onChange={ ({ target: { value } }) => setEmail(value) }\n          />\n        </label>\n        <label htmlFor=\"login--password\">\n          <input\n            className=\"text-alin-center\"\n            data-testid=\"password-input\"\n            placeholder=\"Password\"\n            type=\"password\"\n            id=\"login--password\"\n            name=\"password\"\n            value={ password }\n            onChange={ ({ target: { value } }) => setPassword(value) }\n          />\n        </label>\n        <button\n          className=\"Login__button\"\n          type=\"button\"\n          disabled={ btnVerification() }\n          onClick={ handleBtnClick }\n        >\n          Entrar\n        </button>\n      </div>\n    </div>\n  );\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","export const EMAIL = 'email';\n\nexport const emailAction = (email) => ({ type: EMAIL, email });\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './css/NotLogged.css';\n\nexport default function NotLogged() {\n  return (\n    <div className=\"container-centralized background-color-prymary \">\n      <div className=\"Not-logged \">\n        <p className=\"font-size-xx\">\n          You are not logged\n        </p>\n        <Link className=\"font-size-xx Not-logged__link\" to=\"/\">Click here</Link>\n        <span className=\"font-size-xx\">\n          {' '}\n          to login\n        </span>\n      </div>\n    </div>);\n}\n","export const CURRENCIES = 'currencies';\nexport const ADD_EXPENSE = 'expenses';\nexport const REMOVE_EXPENSES = 'removeExpense';\nexport const IS_EDITING_EXPENSE = 'isEditingExpense';\nexport const UPDATE_EXPENSE = 'updateExpense';\n\nexport const currenciesAction = (currencies) => ({ type: CURRENCIES, currencies });\nexport const addExpensesAction = (expense) => ({ type: ADD_EXPENSE, expense });\nexport const removeExpensesAction = (id) => ({ type: REMOVE_EXPENSES, id });\nexport const editingExpenseStateAction = (id) => (\n  { type: IS_EDITING_EXPENSE, id });\nexport const updateExpenseAction = (expense) => ({ type: UPDATE_EXPENSE, expense });\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './css/Header.css';\n\nexport default function Header() {\n  const reduxState = useSelector((state) => state);\n  const { email } = reduxState.user;\n  const { expenses } = reduxState.wallet;\n  const totalExpenses = expenses.reduce((acc, item) => {\n    const { value, currency, exchangeRates } = item;\n    const total = value * exchangeRates[currency].ask;\n    acc += total;\n    return acc;\n  }, 0).toFixed(2);\n  const currency = 'BRL';\n  return (\n    <header className=\"Header\">\n      <p data-testid=\"email-field\">{email}</p>\n      <p className=\"Header__despesa\">TABELA DE DESPESAS</p>\n      <div>\n        <span>\n          Despesa Total R$\n          {' '}\n        </span>\n        <span data-testid=\"total-field\">\n          {totalExpenses}\n          {' '}\n        </span>\n        <span data-testid=\"header-currency-field\">{currency}</span>\n\n      </div>\n    </header>);\n}\n","export default async function fetchApi() {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nexport async function fetchApiFiltered(currency = 'USDT') {\n  const response = await fetchApi();\n  const keys = Object.keys(response);\n  const result = keys\n    .filter((item) => item !== currency)\n    .reduce((acc, item) => ({ ...acc, [item]: response[item] }), {});\n  return result;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addExpensesAction, updateExpenseAction } from '../redux/actions/walletActions';\nimport fetchApi from '../services/economiaAPI';\nimport './css/ExpenseForm.css';\n\nexport default function ExpensyForm() {\n  const [value, setValue] = useState(0);\n  const [currency, setCurrency] = useState('USD');\n  const [method, setMethod] = useState('Dinheiro');\n  const [category, setCategory] = useState('Alimentação');\n  const [description, setDescription] = useState('');\n  const [exchangeRates, setExchangeRates] = useState(null);\n  const dispatch = useDispatch();\n  const { isExpenseEditing, editExpenseId, expenses } = useSelector(\n    (state) => state.wallet,\n  );\n  useEffect(() => {\n    if (isExpenseEditing) {\n      const index = expenses.findIndex((item) => item.id === editExpenseId);\n      const expense = expenses[index];\n      setValue(expense.value);\n      setCurrency(expense.currency);\n      setMethod(expense.method);\n      setCategory(expense.tag);\n      setDescription(expense.description);\n      setExchangeRates(expense.exchangeRates);\n    }\n  }, [editExpenseId, isExpenseEditing, expenses]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const expense = {\n      id: null,\n      value,\n      currency,\n      method,\n      tag: category,\n      description,\n\n    };\n    if (!isExpenseEditing) {\n      expense.exchangeRates = await fetchApi();\n      dispatch(addExpensesAction(expense));\n    } else {\n      expense.exchangeRates = exchangeRates;\n      dispatch(updateExpenseAction(expense));\n    }\n    setValue(0);\n    setDescription('');\n    setExchangeRates(null);\n  };\n\n  const currenciesProp = useSelector((state) => state.wallet.currencies);\n\n  return (\n    <form\n      onSubmit={ handleSubmit }\n      className=\"background-color-tertiary ExpensyForm\"\n    >\n      <label htmlFor=\"expensy-form--value\">\n        {'Valor: '}\n        <input\n          className=\"expensy-form--value\"\n          data-testid=\"value-input\"\n          id=\"expensy-form--value\"\n          type=\"number\"\n          name=\"value\"\n          value={ value }\n          onChange={ ({ target }) => setValue(target.value) }\n        />\n      </label>\n\n      <label htmlFor=\"expensy-form--currency\">\n        {'Moeda: '}\n        <select\n          id=\"expensy-form--currency\"\n          data-testid=\"currency-input\"\n          value={ currency }\n          name=\"currency\"\n          onChange={ ({ target }) => setCurrency(target.value) }\n        >\n\n          {currenciesProp.map((item) => (\n            <option\n              value={ item }\n              key={ item }\n            >\n              {item}\n            </option>))}\n        </select>\n      </label>\n\n      <label htmlFor=\"expensy-form--payment-method\">\n        {'Método de pagamento: '}\n        <select\n          id=\"expensy-form--payment-method\"\n          value={ method }\n          name=\"method\"\n          onChange={ ({ target }) => setMethod(target.value) }\n          data-testid=\"method-input\"\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"expensy-form--category\">\n        {'Categoria: '}\n        <select\n          id=\"expensy-form--category\"\n          value={ category }\n          name=\"category\"\n          onChange={ ({ target }) => setCategory(target.value) }\n          data-testid=\"tag-input\"\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n\n      <label htmlFor=\"expensy-form--description\">\n        {'Descrição: '}\n        <input\n          data-testid=\"description-input\"\n          id=\"expensy-form--description\"\n          name=\"description\"\n          value={ description }\n          onChange={ ({ target }) => setDescription(target.value) }\n        />\n      </label>\n      {isExpenseEditing\n        ? <button type=\"submit\">Editar despesa</button>\n        : <button type=\"submit\">Adicionar despesa</button>}\n\n    </form>\n\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editingExpenseStateAction,\n  removeExpensesAction } from '../redux/actions/walletActions';\nimport './css/ExpenseTable.css';\n\nexport default function ExpenseTable() {\n  const { expenses } = useSelector((state) => state.wallet);\n  const dispatch = useDispatch();\n  return (\n    <table className=\"ExpenseTable\">\n      <thead>\n        <tr>\n          <th> Descrição </th>\n          <th> Tag </th>\n          <th> Método de pagamento </th>\n          <th> Valor </th>\n          <th> Moeda </th>\n          <th> Câmbio utilizado </th>\n          <th> Valor convertido </th>\n          <th> Moeda de conversão </th>\n          <th> Editar/Excluir </th>\n        </tr>\n      </thead>\n      <tbody>\n        {expenses.map((item) => (\n          <tr key={ item.id }>\n            <td>{item.description}</td>\n            <td>{item.tag}</td>\n            <td>{item.method}</td>\n            <td>{Number(item.value).toFixed(2)}</td>\n            <td>\n              {item.exchangeRates[item.currency].name\n                .split('/')[0]}\n            </td>\n            <td>\n              {Number(\n                item.exchangeRates[item.currency].ask,\n              ).toFixed(2)}\n\n            </td>\n            <td>\n              {(Number(item.exchangeRates[item.currency].ask) * Number(item.value))\n                .toFixed(2)}\n            </td>\n            <td>\n              Real\n            </td>\n            <td>\n              <button\n                className=\"ExpenseTable__edit-btn\"\n                type=\"button\"\n                data-testid=\"edit-btn\"\n                onClick={ () => dispatch(editingExpenseStateAction(item.id)) }\n              >\n                Editar\n              </button>\n              <button\n                className=\"ExpenseTable__add-btn\"\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => dispatch(removeExpensesAction(item.id)) }\n              >\n                Excluir\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>);\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { currenciesAction } from '../redux/actions/walletActions';\nimport Header from '../Components/Header';\nimport { fetchApiFiltered } from '../services/economiaAPI';\nimport ExpensyForm from '../Components/ExpenseForm';\nimport ExpenseTable from '../Components/ExpenseTable';\n\nexport default function Wallet() {\n  const dispatch = useDispatch();\n  const dispatchCurrencies = async () => {\n    const response = await fetchApiFiltered('USDT');\n    const keys = Object.keys(response);\n    dispatch(currenciesAction(keys));\n  };\n\n  useEffect(() => {\n    dispatchCurrencies();\n  });\n  return (\n    <div className=\"container-flex background-color-prymary\">\n      <Header />\n      <ExpensyForm />\n      <ExpenseTable />\n    </div>);\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Login from './pages/Login';\nimport NotLogged from './pages/NotLogged';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App(prop) {\n  const login = useSelector((state) => state.user.login);\n  const { history: { location: { pathname } } } = prop;\n  return (\n    <div className=\"App\">\n      {!login && pathname !== '/' ? <NotLogged /> : (\n        <Switch>\n          <Route path=\"/\" exact component={ Login } />\n          <Route path=\"/carteira\" exact component={ Wallet } />\n        </Switch>\n      )}\n\n    </div>);\n}\n\nApp.propTypes = {\n  history: PropTypes.shape({\n    location: PropTypes.shape({\n      pathname: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport * as userActions from '../actions/userActions';\n\nconst INITIAL_STATE = {\n  email: '',\n  login: false,\n};\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case userActions.EMAIL:\n    return { ...state, email: action.email, login: true };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport * as walletActions from '../actions/walletActions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  expensesId: 0,\n  isExpenseEditing: false,\n  editExpenseId: null,\n};\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case walletActions.CURRENCIES:\n    return { ...state, currencies: action.currencies };\n\n  case walletActions.ADD_EXPENSE: {\n    const { expense } = action;\n    expense.id = state.expensesId;\n    return { ...state,\n      expenses: [...state.expenses, expense],\n      expensesId: state.expensesId + 1 };\n  }\n\n  case walletActions.REMOVE_EXPENSES: {\n    return { ...state,\n      expenses: state.expenses\n        .filter((item) => item.id !== action.id) };\n  }\n\n  case walletActions.IS_EDITING_EXPENSE:\n    return { ...state,\n      isExpenseEditing: true,\n      editExpenseId: action.id };\n\n  case walletActions.UPDATE_EXPENSE: {\n    const { editExpenseId } = state;\n    const expenses = [...state.expenses];\n    const index = expenses.findIndex((item) => item.id === editExpenseId);\n    expenses[index] = action.expense;\n    expenses[index].id = state.editExpenseId;\n    return { ...state, expenses, isExpenseEditing: false, editExpenseId: null };\n  }\n\n  default:\n    return state;\n  }\n}\n","// import user from './user';\nimport { combineReducers } from 'redux';\nimport userReducer from './userReducer';\n// import wallet from './wallet';\nimport walletReducer from './walletReducer';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <React.StrictMode>\n        <Route path=\"/\" component={ App } />\n      </React.StrictMode>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}